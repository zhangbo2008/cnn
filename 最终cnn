# View more python tutorial on my Youtube and Youku channel!!!
#最初的版本是莫烦python他写的,我只修改了几个参数加了几个注释,给初学cnn的朋友看的,欢迎多交流,话说lstm好他妈复杂
# Youtube video tutorial: https://www.youtube.com/channel/UCdyjiB5H8Pu7aDTNVXTTpcg
# Youku video tutorial: http://i.youku.com/pythontutorial

"""
Please note, this code is only for python 3+. If you are using python 2+, please modify the code accordingly.
"""
from __future__ import print_function
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
# number 1 to 10 data



'''闲的写一下如果你没有办法上美国网利用上面from mnist那一行的话,只需要手动下载mnist到一个文件夹,
然后文件夹里面弄一个mnist文件夹和这个py文件他俩同文件层,然后mnist文件夹里面放入mnist4个压缩包就行了.'''
'''http://yann.lecun.com/exdb/mnist/       这个网址是mnist下载地址'''



mnist = input_data.read_data_sets('mnist', one_hot=True)
# View more python tutorial on my Youtube and Youku channel!!!

# Youtube video tutorial: https://www.youtube.com/channel/UCdyjiB5H8Pu7aDTNVXTTpcg
# Youku video tutorial: http://i.youku.com/pythontutorial

"""
Please note, this code is only for python 3+. If you are using python 2+, please modify the code accordingly.
"""

#代码是莫烦写的,既然他开源了我就稍微改一下加点注释.
#用cpu跑很慢5分钟也就到百分之87.有机会要试一下gpu tensorflow
'''对于这个cnn的卷积运算,
1.创立的方法就是tf.nn.conv2d
  他里面的参数是x:输入的数据也就是mnist
  W,也就是卷积kernal
  strides就是步长,这里面图形在第二位和第三维所以
  # stride [1, x_movement, y_movement, 1]
  padding:就是是否进行图像的填充,一般选same就是把图像边缘都填充成0这样让kernal可以
  跟边缘的数据也进行运算,效果能更好.当然你也可以选VALID这个不好用的
2.卷积的使用:
   conv2d(x_image, W_conv1)就可以了,直接参数带进去'''
'''莫烦说pooling+stride=1比stride=2要好,但是why呢
, 我理解是不是因为你stride2就是直接跳过,而pool加stride1并没有跳过数据,所有的数据都参与了运算,所以更准确

3.pooling的创建和使用
  类似卷积:也是tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')



'''
def compute_accuracy(v_xs, v_ys):
    global prediction
    y_pre = sess.run(prediction, feed_dict={xs: v_xs, keep_prob: 1})
    correct_prediction = tf.equal(tf.argmax(y_pre,1), tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    result = sess.run(accuracy, feed_dict={xs: v_xs, ys: v_ys, keep_prob: 1})
    return result

def weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(initial)

def bias_variable(shape):
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)
a=bias_variable([32])

#下面这个是tensorflow里面显示变量内容的方法先弄一个sess然后run这个变量,即记好下面的3行代码.他用来打印变量的数值
sess = tf.Session()
sess.run(tf.global_variables_initializer()) 
print(sess.run(a))


def conv2d(x, W):
    # stride [1, x_movement, y_movement, 1]
    # Must have strides[0] = strides[3] = 1
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')

def max_pool_2x2(x):
    # stride [1, x_movement, y_movement, 1]
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')

# define placeholder for inputs to network
xs = tf.placeholder(tf.float32, [None, 784])/255.   # 28x28
ys = tf.placeholder(tf.float32, [None, 10])
keep_prob = tf.placeholder(tf.float32)
x_image = tf.reshape(xs, [-1, 28, 28, 1])
# print(x_image.shape)  # [n_samples, 28,28,1]

## conv1 layer ##
W_conv1 = weight_variable([5,5, 1,15]) # patch 就是卷积kernal的矩阵shape,5x5, in size 1, out size 32
b_conv1 = bias_variable([15])
'''这里面的[15]是跟上面的outsize一样'''
'''下面这一行的加法就是一个标量加一个矩阵本质是把矩阵的每一个元素都加这个标量
这是tensorflow默认的规则
还有一个是一个n*m的矩阵加一个1*m的矩阵本质是把1*m的矩阵加到n*m矩阵的每一行,都是方便计算的.直接写+即可
只要他们是tf.Variable类型就可以这么计算'''
h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1) # output size 28x28x32
h_pool1 = max_pool_2x2(h_conv1)                                         # output size 14x14x32

## conv2 layer ##
W_conv2 = weight_variable([5,5, 15, 64]) # patch 5x5, in size 15, out size 64
'''根据我的尝试,这个in size ,outsize是可以乱改的,只需要下一层的输入insize等于上一层
的outsize即可,越大越好但是也会越卡'''
b_conv2 = bias_variable([64])
h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2) # output size 14x14x64
h_pool2 = max_pool_2x2(h_conv2)                                         # output size 7x7x64

## fc1 layer ##
W_fc1 = weight_variable([7*7*64, 1024])       #把W给他拍平,然后用一个普通的dnn来进行处理,即对向量做放射函数这个神经层
b_fc1 = bias_variable([1024])               #这几个1024很重要,尽量别改小了,dnn的速度很快,可以设置这样一个
                                            #1024这么大的数,没问题,我改200后效率提升不大,效果很差.
# [n_samples, 7, 7, 64] ->> [n_samples, 7*7*64]
h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])   #h_pool2是图像他是带第一个维数的,所以前面一个-1,
                                                   #这个数据也就是一个我们很熟悉的做机器学习里面的数据类型
                                                   #一个矩阵第一个分量是n_sample,第二个分量是特征.只不过这里面
                                                   #特征的个数有点多是7*7*64
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1) #普通dnn的matmul而已
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)         #keep_prob就是做dropout来保证不会过拟合

## fc2 layer ##              #这层就是再做一次dnn然后softmax输出了.
W_fc2 = weight_variable([1024, 10])
b_fc2 = bias_variable([10])
prediction = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)


# the error between prediction and real data
cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),
                                              reduction_indices=[1]))       # loss
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)      #这里面optimizer可以换换来试试速度

sess = tf.Session()
# important step
# tf.initialize_all_variables() no long valid from
# 2017-03-02 if using tensorflow >= 0.12
if int((tf.__version__).split('.')[1]) < 12 and int((tf.__version__).split('.')[0]) < 1:
    init = tf.initialize_all_variables()
else:
    init = tf.global_variables_initializer()
#上面这4行操作这么骚......
sess.run(init)

for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(50)
    sess.run(train_step, feed_dict={xs: batch_xs, ys: batch_ys, keep_prob: 0.5})
    if i % 50 == 0:
        print(compute_accuracy(
            mnist.test.images[:1000], mnist.test.labels[:1000]))
